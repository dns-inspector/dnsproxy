name: "DNSProxy CI & CD"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  actions: read
  contents: read

jobs:
  build_and_test:
    name: "Build & Test"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          persist-credentials: false

      - name: "Set up Go"
        id: install_go
        uses: actions/setup-go@v5
        with:
          go-version: "stable"

      - name: "Build (Debug)"
        id: build
        run: |
          go build -v ./...

          cd cmd/dnsproxy
          go build -v
          cd ../../
          mv cmd/dnsproxy/dnsproxy .
          
          cd cmd/proxytest
          go build -v
          cd ../../
          mv cmd/proxytest/proxytest .

      - name: "Perform Unit Tests"
        id: unit_tests
        run: |
          go test -v ./...
      
      - name: "Perform Functional Tests"
        id: functional_tests
        run: |
          ./proxytest --setup-pki
          nohup ./dnsproxy server -c dnsproxy_test.conf &
          sleep 1
          ./proxytest https://localhost:8443/dns-query a dns.google. | grep '{8, 8, 8, 8}'
          ./proxytest localhost:8853 aaaa dns.google. | grep '{32, 1, 72, 96, 72, 96, 0, 0, 0, 0, 0, 0, 0, 0, 136, 68}'
          ./proxytest https://localhost:8443/dns-query txt time.dnsproxy.control. | grep "$(date --utc +%Y-%m-%d)"
          ./proxytest localhost:8853 txt ip.dnsproxy.control. | grep '127.0.0.1'

  build_release:
    name: "Release Build"
    runs-on: ubuntu-latest
    needs: [build_and_test]
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          persist-credentials: false

      - name: Prepare
        id: prepare
        run: |
          echo "version=$(git --no-pager tag --points-at HEAD)" >> "$GITHUB_OUTPUT"
          echo "build_date=$(date -R)" >> "$GITHUB_OUTPUT"

      - name: Validate version
        id: validate_version
        if: steps.prepare.outputs.version != ''
        run: |
          TAG_NAME="$(git --no-pager tag --points-at HEAD)"
          VERSION="$(cat dnsproxy.version)"

          echo "Tag name: ${TAG_NAME}, version: ${VERSION}"

          if [[ "${TAG_NAME}" != "${VERSION}" ]]; then
            echo "::error file=dnsproxy.version,line=1::Tag name does not match version file"
            exit 1
          fi

      - name: "Build"
        id: build
        if: steps.prepare.outputs.version != ''
        run: DOCKER_CMD=docker ./release.sh

      - name: "Upload Artifacts"
        id: artifacts
        if: steps.prepare.outputs.version != ''
        uses: actions/upload-artifact@v4
        with:
          name: dnsproxy-linux.gz
          path: |
            artifacts/*.gz
            artifacts/*.rpm
            artifacts/*.deb
          compression-level: 0
